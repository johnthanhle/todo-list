[{"/Users/John/todo-list/frontend/src/App.js":"1","/Users/John/todo-list/frontend/src/reportWebVitals.js":"2"},{"size":5413,"mtime":1608896098228,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":1608893600286,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1qzz5mi",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/John/todo-list/frontend/src/App.js",["11"],"import logo from './logo.svg';\nimport './App.css';\n\nimport React, {useState} from 'react';\nimport {useQuery, useMutation} from '@apollo/react-hooks';\nimport {gql} from 'apollo-boost';\n\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst GET_TODOS = gql`\n  {\n    todos {\n      _id\n      task\n      isCompleted\n    }\n  }\n`;\n\nconst ADD_TODO = gql`\n  mutation AddTodo($task: String!) {\n    addTodo(task: $task) {\n      _id\n      task\n      isCompleted\n    }\n  }\n`;\n\nconst COMPLETE_TODO = gql`\n  mutation CompleteTodo($todoId: ID!, $isCompleted: Boolean!) {\n    completeTodo(todoId: $todoId, isCompleted: $isCompleted) {\n      _id\n      task\n      isCompleted\n    }\n  }\n`;\n\nconst DELETE_TODO = gql`\n  mutation DeleteTodo($todoId: ID!) {\n    deleteTodo(todoId: $todoId)\n  }\n`;\n\nexport default function App() {\n  const [open, setOpen] = useState(false);\n\n  const [todoToBeDeleted, setTodoToBeDeleted] = useState('');\n\n  const [inputs, setInputs] = useState({\n    task: '',\n  });\n\n  const {loading, error, data} = useQuery(GET_TODOS);\n\n  const [addTodo] = useMutation(ADD_TODO, {\n    update(cache, {data: {addTodo}}) {\n      const {todos} = cache.readQuery({query: GET_TODOS});\n      todos.unshift(addTodo);\n      cache.writeQuery({\n        query: GET_TODOS,\n        data: {todos: todos},\n      });\n    },\n  });\n\n  const [completeTodo] = useMutation(COMPLETE_TODO);\n\n  const [deleteTodo] = useMutation(DELETE_TODO, {\n    update(cache, {data: {deleteTodo}}) {\n      const {todos} = cache.readQuery({query: GET_TODOS});\n      cache.writeQuery({\n        query: GET_TODOS,\n        data: {todos: todos.filter((todo) => todo._id !== deleteTodo)},\n      });\n    },\n  });\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n    setTodoToBeDeleted('');\n  }\n\n  const handleInputs = (event) => {\n    event.persist();\n    setInputs((inputs) => ({\n      [event.target.id]: event.target.value,\n    }));\n  };\n\n  const handleAddTodo = (event) => {\n    event.preventDefault();\n    addTodo({variables: {task: inputs.task}});\n    setInputs((inputs) => ({\n      task: '',\n    }));\n  };\n\n  const handleCompleteTodo = (_id, completedArg) => () => {\n    completeTodo({variables: {todoId: _id, isCompleted: !completedArg}});\n  };\n\n  const handleDeleteTodo = () => {\n    deleteTodo({variables: {todoId: todoToBeDeleted}});\n    setOpen(false);\n  };\n\n  if (loading) return <div>Loading...</div>;\n\n  if (error) return <div>Error!</div>;\n\n  return (\n    <Container maxWidth='sm'>\n      <Typography variant='h3' align='center' gutterBottom>\n        GraphQL Todo List!\n      </Typography>\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n      >\n        <DialogTitle id='alert-dialog-title'>\n          {'Are you sure you want to DELETE this todo?'}\n        </DialogTitle>\n        <DialogActions>\n          <Button onClick={handleClose} color='primary'>\n            Cancel\n          </Button>\n          <Button onClick={handleDeleteTodo} color='secondary' autoFocus>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <form onSubmit={handleAddTodo}>\n        <TextField\n          id='task'\n          value={inputs.task}\n          label='+ Add todo'\n          margin='normal'\n          fullWidth\n          variant='outlined'\n          onChange={handleInputs}\n        />\n        <Button\n          type='submit'\n          variant='contained'\n          color='primary'\n          fullWidth\n          disabled={inputs.task ? false : true}\n        >\n          Submit\n        </Button>\n      </form>\n\n      <List>\n        {data.todos.map(({_id, task, isCompleted}) => {\n          return (\n            <ListItem\n              key={_id}\n              role={undefined}\n              button\n              divider\n              onClick={handleCompleteTodo(_id, isCompleted)}\n            >\n              <ListItemIcon>\n                <Checkbox checked={isCompleted} />\n              </ListItemIcon>\n              <ListItemText\n                id={_id}\n                primary={task}\n                style={{textDecoration: isCompleted ? 'line-through' : 'none'}}\n              />\n              <ListItemSecondaryAction\n                onClick={() => {\n                  setTodoToBeDeleted(_id);\n                  handleClickOpen();\n                }}\n              >\n                <IconButton edge='end'>\n                  <DeleteForeverRoundedIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Container>\n  );\n}","/Users/John/todo-list/frontend/src/reportWebVitals.js",[],{"ruleId":"12","severity":1,"message":"13","line":1,"column":8,"nodeType":"14","messageId":"15","endLine":1,"endColumn":12},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar"]